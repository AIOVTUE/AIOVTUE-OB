/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => ObsidianWebPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  frontendUrl: "",
  apiKey: ""
};
var ObsidianWebPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addRibbonIcon("upload-cloud", "\u53D1\u5E03\u5230\u7F51\u7AD9", (evt) => {
      this.publishCurrentNote();
    });
    this.addCommand({
      id: "publish-note",
      name: "\u53D1\u5E03\u5F53\u524D\u7B14\u8BB0",
      callback: () => {
        this.publishCurrentNote();
      }
    });
    this.addCommand({
      id: "create-share-link",
      name: "\u521B\u5EFA\u5206\u4EAB\u94FE\u63A5",
      callback: () => {
        this.createShareLink();
      }
    });
    this.addSettingTab(new ObsidianWebSettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async getBackendUrl() {
    try {
      if (!this.settings.frontendUrl) {
        console.error("\u524D\u7AEF\u5730\u5740\u672A\u914D\u7F6E");
        new import_obsidian.Notice("\u8BF7\u5148\u914D\u7F6E\u524D\u7AEF\u5730\u5740");
        return null;
      }
      console.log("\u5C1D\u8BD5\u83B7\u53D6\u540E\u7AEF\u5730\u5740\uFF0C\u524D\u7AEF\u5730\u5740:", this.settings.frontendUrl);
      const configUrl = `${this.settings.frontendUrl}/api/config.json`;
      console.log("\u8BF7\u6C42\u914D\u7F6E\u6587\u4EF6:", configUrl);
      try {
        const configResponse = await (0, import_obsidian.requestUrl)({
          url: configUrl,
          method: "GET",
          headers: {
            "Accept": "application/json",
            "Cache-Control": "no-cache"
          }
        });
        console.log("\u914D\u7F6E\u6587\u4EF6\u54CD\u5E94\u72B6\u6001:", configResponse.status);
        console.log("\u914D\u7F6E\u6587\u4EF6\u54CD\u5E94\u5185\u5BB9:", configResponse.text);
        if (configResponse.status >= 200 && configResponse.status < 300) {
          const config = configResponse.json;
          console.log("\u914D\u7F6E\u6587\u4EF6\u5185\u5BB9:", config);
          const backendUrl = config.backendUrl || config.apiBaseUrl;
          if (backendUrl) {
            console.log("\u6210\u529F\u83B7\u53D6\u540E\u7AEF\u5730\u5740:", backendUrl);
            new import_obsidian.Notice("\u6210\u529F\u83B7\u53D6\u540E\u7AEF\u5730\u5740: " + backendUrl);
            return backendUrl;
          } else {
            console.error("\u914D\u7F6E\u6587\u4EF6\u4E2D\u672A\u627E\u5230\u540E\u7AEF\u5730\u5740");
            new import_obsidian.Notice("\u914D\u7F6E\u6587\u4EF6\u4E2D\u672A\u627E\u5230\u540E\u7AEF\u5730\u5740");
          }
        } else {
          console.error("\u914D\u7F6E\u6587\u4EF6\u8BF7\u6C42\u5931\u8D25:", configResponse.status);
          new import_obsidian.Notice("\u914D\u7F6E\u6587\u4EF6\u8BF7\u6C42\u5931\u8D25: " + configResponse.status);
        }
      } catch (requestError) {
        console.error("\u914D\u7F6E\u6587\u4EF6\u8BF7\u6C42\u5F02\u5E38:", requestError);
        new import_obsidian.Notice("\u914D\u7F6E\u6587\u4EF6\u8BF7\u6C42\u5F02\u5E38\uFF0C\u5C1D\u8BD5\u4F7F\u7528\u9ED8\u8BA4\u914D\u7F6E: " + requestError.message);
      }
      console.log("\u4F7F\u7528\u5DF2\u77E5\u7684\u540E\u7AEF\u5730\u5740");
      const knownBackendUrl = "https://obsidna.20030327.xyz";
      console.log("\u4F7F\u7528\u540E\u7AEF\u5730\u5740:", knownBackendUrl);
      new import_obsidian.Notice("\u4F7F\u7528\u9ED8\u8BA4\u540E\u7AEF\u5730\u5740: " + knownBackendUrl);
      return knownBackendUrl;
    } catch (error) {
      console.error("\u83B7\u53D6\u540E\u7AEF\u5730\u5740\u8FC7\u7A0B\u4E2D\u53D1\u751F\u9519\u8BEF:", error);
      new import_obsidian.Notice(`\u83B7\u53D6\u540E\u7AEF\u5730\u5740\u5931\u8D25: ${error.message}`);
      return null;
    }
  }
  async publishCurrentNote() {
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (!activeView) {
      new import_obsidian.Notice("\u8BF7\u5148\u6253\u5F00\u4E00\u4E2AMarkdown\u6587\u4EF6");
      return;
    }
    if (!this.settings.frontendUrl || !this.settings.apiKey) {
      new import_obsidian.Notice("\u8BF7\u5148\u5728\u8BBE\u7F6E\u4E2D\u914D\u7F6E\u524D\u7AEF\u5730\u5740\u548CAPI\u5BC6\u94A5");
      return;
    }
    const file = activeView.file;
    if (!file) {
      new import_obsidian.Notice("\u65E0\u6CD5\u83B7\u53D6\u5F53\u524D\u6587\u4EF6");
      return;
    }
    try {
      const content = await this.app.vault.read(file);
      const frontmatter = this.parseFrontmatter(content);
      if (frontmatter && frontmatter["\u53D1\u5E03\u94FE\u63A5"]) {
        new import_obsidian.Notice("\u6B64\u6587\u4EF6\u5DF2\u5206\u4EAB\u8FC7\uFF0C\u65E0\u9700\u91CD\u590D\u4E0A\u4F20\uFF01");
        return;
      }
      const title = file.basename;
      const contentWithoutFrontmatter = this.removeFrontmatter(content);
      const processedContent = await this.processImages(contentWithoutFrontmatter);
      const article = {
        title,
        content: processedContent,
        author: "Obsidian\u7528\u6237"
      };
      const response = await this.apiRequest("POST", "/api/articles", article);
      if (response.ok) {
        const result = await response.json();
        console.log("\u53D1\u5E03\u54CD\u5E94:", result);
        if (result && result.id) {
          const successMessage = `\u6587\u7AE0\u53D1\u5E03\u6210\u529F\uFF01ID: ${result.id}`;
          new import_obsidian.Notice(successMessage);
          try {
            const shareResponse = await this.apiRequest("POST", `/api/articles/${result.id}/share`);
            if (shareResponse.ok) {
              const shareResult = await shareResponse.json();
              if (shareResult && shareResult.shareId) {
                const shareUrl = `${this.settings.frontendUrl}/share/${shareResult.shareId}`;
                await navigator.clipboard.writeText(shareUrl);
                try {
                  await this.addShareLinkToFrontmatter(file, shareUrl);
                  new import_obsidian.Notice("\u5206\u4EAB\u94FE\u63A5\u5DF2\u590D\u5236\u5230\u526A\u8D34\u677F\u5E76\u4FDD\u5B58\u5230\u7B14\u8BB0\u5C5E\u6027\uFF01");
                } catch (frontmatterError) {
                  console.error("\u4FDD\u5B58\u5206\u4EAB\u94FE\u63A5\u5230frontmatter\u5931\u8D25:", frontmatterError);
                  new import_obsidian.Notice("\u5206\u4EAB\u94FE\u63A5\u5DF2\u590D\u5236\u5230\u526A\u8D34\u677F\uFF01");
                }
              } else {
                new import_obsidian.Notice("\u521B\u5EFA\u5206\u4EAB\u94FE\u63A5\u5931\u8D25");
              }
            } else {
              new import_obsidian.Notice("\u521B\u5EFA\u5206\u4EAB\u94FE\u63A5\u5931\u8D25");
            }
          } catch (shareError) {
            console.error("\u521B\u5EFA\u5206\u4EAB\u94FE\u63A5\u65F6\u51FA\u9519:", shareError);
            new import_obsidian.Notice("\u521B\u5EFA\u5206\u4EAB\u94FE\u63A5\u5931\u8D25");
          }
        } else {
          console.error("\u54CD\u5E94\u683C\u5F0F\u9519\u8BEF:", result);
          new import_obsidian.Notice("\u53D1\u5E03\u6210\u529F\u4F46\u54CD\u5E94\u683C\u5F0F\u5F02\u5E38");
        }
      } else {
        const errorText = await response.text();
        if (response.status === 409) {
          try {
            const errorData = JSON.parse(errorText);
            if (errorData.action === "prompt") {
              new import_obsidian.Notice("\u68C0\u6D4B\u5230\u91CD\u590D\u6807\u9898\u7684\u6587\u7AE0\uFF0C\u8BF7\u5728\u524D\u7AEF\u9875\u9762\u5904\u7406\u91CD\u590D\u6587\u7AE0\u95EE\u9898");
            } else {
              new import_obsidian.Notice(`\u53D1\u5E03\u5931\u8D25: ${errorText}`);
            }
          } catch (e) {
            new import_obsidian.Notice(`\u53D1\u5E03\u5931\u8D25: ${errorText}`);
          }
        } else {
          new import_obsidian.Notice(`\u53D1\u5E03\u5931\u8D25: ${errorText}`);
        }
      }
    } catch (error) {
      console.error("\u53D1\u5E03\u6587\u7AE0\u65F6\u51FA\u9519:", error);
      new import_obsidian.Notice("\u53D1\u5E03\u5931\u8D25\uFF0C\u8BF7\u68C0\u67E5\u7F51\u7EDC\u8FDE\u63A5\u548C\u8BBE\u7F6E");
    }
  }
  async createShareLink() {
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (!activeView) {
      new import_obsidian.Notice("\u8BF7\u5148\u6253\u5F00\u4E00\u4E2AMarkdown\u6587\u4EF6");
      return;
    }
    if (!this.settings.frontendUrl || !this.settings.apiKey) {
      new import_obsidian.Notice("\u8BF7\u5148\u5728\u8BBE\u7F6E\u4E2D\u914D\u7F6E\u7F51\u7AD9\u5730\u5740\u548CAPI\u5BC6\u94A5");
      return;
    }
    const file = activeView.file;
    if (!file) {
      new import_obsidian.Notice("\u65E0\u6CD5\u83B7\u53D6\u5F53\u524D\u6587\u4EF6");
      return;
    }
    try {
      const content = await this.app.vault.read(file);
      const frontmatter = this.parseFrontmatter(content);
      if (frontmatter && frontmatter["\u53D1\u5E03\u94FE\u63A5"]) {
        const existingShareUrl = frontmatter["\u53D1\u5E03\u94FE\u63A5"];
        await navigator.clipboard.writeText(existingShareUrl);
        new import_obsidian.Notice("\u5206\u4EAB\u94FE\u63A5\u5DF2\u590D\u5236\u5230\u526A\u8D34\u677F\uFF01");
        return;
      }
      new import_obsidian.Notice("\u6B64\u6587\u4EF6\u5C1A\u672A\u53D1\u5E03\uFF0C\u8BF7\u5148\u53D1\u5E03\u6587\u7AE0\uFF01");
    } catch (error) {
      console.error("\u83B7\u53D6\u5206\u4EAB\u94FE\u63A5\u65F6\u51FA\u9519:", error);
      new import_obsidian.Notice(`\u83B7\u53D6\u5206\u4EAB\u94FE\u63A5\u5931\u8D25: ${error.message}`);
    }
  }
  async processImages(content) {
    const imageRegex = /!\[([^\]]*)\]\(([^)]+)\)/g;
    let processedContent = content;
    const matches = Array.from(content.matchAll(imageRegex));
    for (const match of matches) {
      const [fullMatch, alt, imagePath] = match;
      if (!imagePath.startsWith("http")) {
        try {
          const imageFile = this.app.vault.getAbstractFileByPath(imagePath);
          if (imageFile instanceof import_obsidian.TFile) {
            const imageBuffer = await this.app.vault.readBinary(imageFile);
            const formData = new FormData();
            formData.append("image", new Blob([imageBuffer]), imageFile.name);
            const response = await this.apiRequest("POST", "/api/upload", formData, false);
            if (response.ok) {
              const result = await response.json();
              const backendUrl = await this.getBackendUrl();
              const newImageUrl = `${backendUrl}/api/images/${result.imageId}`;
              processedContent = processedContent.replace(fullMatch, `![${alt}](${newImageUrl})`);
            }
          }
        } catch (error) {
          console.error("\u56FE\u7247\u4E0A\u4F20\u5931\u8D25:", error);
        }
      }
    }
    return processedContent;
  }
  parseFrontmatter(content) {
    if (!content.startsWith("---")) {
      return null;
    }
    const secondDelimiterIndex = content.indexOf("---", 3);
    if (secondDelimiterIndex === -1) {
      return null;
    }
    const frontmatterText = content.substring(3, secondDelimiterIndex).trim();
    const frontmatter = {};
    const lines = frontmatterText.split("\n");
    for (const line of lines) {
      const colonIndex = line.indexOf(":");
      if (colonIndex > 0) {
        const key = line.substring(0, colonIndex).trim();
        const value = line.substring(colonIndex + 1).trim();
        frontmatter[key] = value;
      }
    }
    return frontmatter;
  }
  async addShareLinkToFrontmatter(file, shareUrl) {
    const content = await this.app.vault.read(file);
    let newContent;
    if (content.startsWith("---")) {
      const secondDelimiterIndex = content.indexOf("---", 3);
      if (secondDelimiterIndex !== -1) {
        const frontmatterPart = content.substring(0, secondDelimiterIndex);
        const restContent = content.substring(secondDelimiterIndex);
        newContent = frontmatterPart + `\u53D1\u5E03\u94FE\u63A5: ${shareUrl}
` + restContent;
      } else {
        newContent = `---
\u53D1\u5E03\u94FE\u63A5: ${shareUrl}
---

` + content;
      }
    } else {
      newContent = `---
\u53D1\u5E03\u94FE\u63A5: ${shareUrl}
---

` + content;
    }
    await this.app.vault.modify(file, newContent);
  }
  removeFrontmatter(content) {
    if (content.startsWith("---")) {
      const secondDelimiterIndex = content.indexOf("---", 3);
      if (secondDelimiterIndex !== -1) {
        return content.substring(secondDelimiterIndex + 3).trim();
      }
    }
    return content;
  }
  async apiRequest(method, endpoint, data, isJson = true) {
    const backendUrl = await this.getBackendUrl();
    if (!backendUrl) {
      throw new Error("\u65E0\u6CD5\u83B7\u53D6\u540E\u7AEF\u5730\u5740\uFF0C\u8BF7\u68C0\u67E5\u524D\u7AEF\u5730\u5740\u914D\u7F6E");
    }
    const url = `${backendUrl}${endpoint}`;
    const headers = {
      "X-API-Key": this.settings.apiKey
    };
    let body;
    if (data) {
      if (isJson) {
        headers["Content-Type"] = "application/json";
        body = JSON.stringify(data);
      } else {
        body = data;
      }
    }
    const response = await (0, import_obsidian.requestUrl)({
      url,
      method,
      headers,
      body
    });
    return {
      ok: response.status >= 200 && response.status < 300,
      status: response.status,
      statusText: response.status.toString(),
      headers: new Headers(response.headers || {}),
      json: async () => response.json,
      text: async () => response.text,
      arrayBuffer: async () => response.arrayBuffer
    };
  }
};
var ObsidianWebSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Obsidian Web \u53D1\u5E03\u5668\u8BBE\u7F6E" });
    new import_obsidian.Setting(containerEl).setName("\u524D\u7AEF\u5730\u5740").setDesc("\u60A8\u7684\u524D\u7AEF\u5E94\u7528\u7A0B\u5E8F\u7684\u57FA\u7840URL\uFF08\u4F8B\u5982\uFF1Ahttps://your-frontend.pages.dev\uFF09\uFF0C\u63D2\u4EF6\u5C06\u81EA\u52A8\u83B7\u53D6\u540E\u7AEFAPI\u5730\u5740").addText((text) => text.setPlaceholder("https://your-frontend.pages.dev").setValue(this.plugin.settings.frontendUrl).onChange(async (value) => {
      this.plugin.settings.frontendUrl = value.trim();
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("API\u5BC6\u94A5").setDesc("\u7528\u4E8E\u8EAB\u4EFD\u9A8C\u8BC1\u7684API\u5BC6\u94A5").addText((text) => text.setPlaceholder("\u8BF7\u8F93\u5165\u60A8\u7684API\u5BC6\u94A5").setValue(this.plugin.settings.apiKey).onChange(async (value) => {
      this.plugin.settings.apiKey = value.trim();
      await this.plugin.saveSettings();
    }));
    containerEl.createEl("h3", { text: "\u4F7F\u7528\u8BF4\u660E" });
    const instructions = containerEl.createEl("div");
    instructions.innerHTML = `
			<p>1. \u5728\u4E0A\u65B9\u914D\u7F6E\u60A8\u7684\u524D\u7AEF\u5730\u5740\u548CAPI\u5BC6\u94A5</p>
			<p>2. \u63D2\u4EF6\u4F1A\u81EA\u52A8\u4ECE\u524D\u7AEF\u83B7\u53D6\u540E\u7AEFAPI\u5730\u5740</p>
			<p>3. \u6253\u5F00\u60A8\u60F3\u8981\u53D1\u5E03\u7684\u7B14\u8BB0</p>
			<p>4. \u4F7F\u7528\u529F\u80FD\u533A\u56FE\u6807\u6216\u547D\u4EE4\u9762\u677F\u8FDB\u884C\u53D1\u5E03</p>
			<p>5. \u4F7F\u7528\u547D\u4EE4\u9762\u677F\u4E3A\u5DF2\u53D1\u5E03\u7684\u6587\u7AE0\u521B\u5EFA\u5206\u4EAB\u94FE\u63A5</p>
			<p>6. \u672C\u5730\u56FE\u7247\u4F1A\u81EA\u52A8\u4E0A\u4F20\u5230\u670D\u52A1\u5668</p>
		`;
  }
};
